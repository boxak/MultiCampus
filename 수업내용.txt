(1) 크롬 브라우저 설치 : https://www.google.com/chrome
(2) Java SE(JDK) 설치 : http://java.sun.com/ -> https://www.oracle.com/technetwork/java/index.html
     설치후 환경변수 설정 : JAVA_HOME, PATH
                                  JAVA_HOME - C:\Program Files\Java\jdk1.8.0_231
                                  PATH - %JAVA_HOME%\bin
(3) Eclipse 설치 : http://www.eclipse.org/
                        C:\unico\eclipse-workspace
                        프로젝트라는 폴더를 생성해야 한다.
                        - Java Project   -  javaexam
                        - Dynamic Web Project
                        - Spring MVC Project
                                 :
                        
 맛보기용 자바 프로그램 : FirstApp

 [ 자바 구문 ]

 1. 데이터 타입: 2장
 2. 변수 활용:2장
 3. 연산자:3장
 4. 제어문:4장
 5. 배열: 5장 
 -------------- 기본 구문
 6. 클래스 정의와 객체 생성
 7. 상속, 다형성, 추상클래스, 인터페이스
 8. 예외처리

-------------------- OOP 구문 객체지향 구문

API - application programming interface
	자주 필요로하는 기능을 미리 만들어 놓은 프로그램
	클래스(Math, Date, Calendar, ...) - 패키지(java.io, java.net,java.sql, java.lang...) 패키지들
	IO 패키지 - 파일 입출력 패키지. 
	패키지 - 클래스 묶음. JAVA.LANG - OBJECT, STRING, STIRNGbUFFER 등등 클래스들.
	패키지화 학습 소스들을 패키지화 : DAY1, DAY2 ..... 클래스 묶어 놓고, 그룹화

LiteralTest

1.데이터 타입
	프로그램 - 데이타 처리를 위한 것 빠르고 정확하고
	자바로 처리할수 있는 데이타 종류들

	숫자데이터 - 정수/byte,short,int,long , 실수/float/double(소수점 붙어있는 수)
	1 1.0 '1' 완전히 각기 다른 일.
	정수/byte 1byte short 2byte int 4byte long 8byte  || 실수 / float 4 double 8
	왠만해서는 byte나 short 거의 안쓴다고 보면됌.

	논리데이터 - true, false
	문자데이터 - 문자의 코드값 처리 가능. 2 byte. '1' = 49(ascii) , '1' - 0031 , 'a' - 0061 '가' - AC00
	문자열데이터 - rorcpfh cnlrmq.
	
1 정수 1.0 실수 '1' 문자 "1" 문자열

리터럴(literal) : 프로그램 소스코드에서 사용되는 데이터값
	1, 1.0, '1', "1", "가나다", true, false 이 모두다 리터럴 정수, 실수, 문자, 문자열 리터럴, 

변수 : 데이터 값을 저장하는 메모리의 방
	데이터값을 저장하기 위해 메모리의 일정 공간에 붙여진 이름.
 	저장된 데이터 값을 계속해서 변경 가능
	필요시 생성해서 사용한다

변수 선언 int(타입, variable type) num(메모리방 이름, variable name, address)

변수명 명명법 소문자로 시작, 명사, 숫자로 시작 불가, 중간에는 가능, _, $ 는 괜춘.
클래스는 대문자로

자바 주요 연산자
	- 기능
	산술연산자, 비교연산자, 논리연산자, 조건연산자, 대입연산자

	- 사용되는항 (피연산자, 연산에 사용되는 데이터) 의 갯수
	단항 연산자 : ++num(num = num+1) R 지원안함.
	이항연산자 : 항1 연산자 항2
	삼항 연산자: 항1 ? 항2 : 항3

	. 
	++, --, +,  -, *, /, !, ~, (타입명)
 	*, /, %
             +, -
	==, !=, >, <, >=, <=, instanceof
	>>,>>>,<<
	&, |, ^
	&& 
             ||
	항1 ? 항2 : 항3 (삼항)
	=, +=, -=, *=, /=
	

 	연산자 피연산자(항)

             ++su, --su, -su, !true
           
             ++su, su++

  l-value : 방 : 변수
  r-value : 값 : 식(변수, 리터럴, 연산식, 리턴값이 있는 메서드의 호출식)

  = 연산을 처리할 때
  l-value의 타입과 r-value의 타입은 동일해야 한다.
  그런데 만일 다른 타입이 사용되면 r-value의 값이 손실되지 않는 범위에서
  l-value의 타입으로 자동 변환한다.

         int = char
         (4)   (2)
         int = double
         (4)   (8)

         byte < short < int < long < float < double
         (1)      (2)      (4)   (8)     (4)      (8)
         char < int < long < float < double
         (2)      (4)   (8)     (4)      (8)

         boolean

         short = (short)char
         char = (char)short
         char = (char)byte

  [ 제어문 ]

  정의된 수행 문장들을 한번씩 순차적으로 수행하면서 진행하는 것이 기본이지만
  조건에 따라 수행 문장들을 선택하여 수행거나 반복해서 여러번 수행도록 하고자 할 때
  제어문을 사용한다.

  - 선택(조건)제어문 - if(else), switch
  - 반복제어문 - for, while, do ~ while
  - 분기제어문 - break, continue

  if(조건식)
     수행문장;

  if(조건식) {
     수행문장1;
     수행문장2;
  }

  if(조건식) {
     수행문장1;
     수행문장2;
  } else {
     수행문장3;
     수행문장4;
  }

  if(조건식1)
     수행문장1;
  else if(조건식2)
     수행문장2;
  else if(조건식3)
     수행문장3;
         :
  else
     수행문장n;

   switch(식) {
      case 비교값1 : 수행문장1;
                          수행문장2;
      case 비교값2 : 수행문장3;
                          수행문장4;
      case 비교값3 : 수행문장5;
                          수행문장6;
      case 비교값4 : 수행문장7;
                          수행문장8;
      default : 수행문장9;
   }

    switch(식) {
      case 비교값1 : 수행문장1;
                          수행문장2;
                          break;
      case 비교값2 : 수행문장3;
                          수행문장4;
                          break;
      case 비교값3 : 수행문장5;
                          수행문장6;
      case 비교값4 : 수행문장7;
                          수행문장8;
		break;
      default : 수행문장9;                    
   }
  
   식 : int(byte,short,char), String

    




   [ 반복구문 ]
   for   	: 미리 반복횟수를 할고 있거나 어떠한 값의 변화를 주면서 반복하려는 경우
   while	: 조건이 만족되는 동안 반복하려는 경우

   for(초기식;조건식;증감식)
       반복문장

   for(;조건식;)
       반복문장;

   while(조건식)
       반복문장


   for(변수의선언 및 초기화;반복횟수를 결정할 조건식;변수의 값을 변화시키는식)

   for(;;)    ---> 무한루프

   for(int i=1; i <= 10; i++)
         반복문장

   for(int i=1; i <= 10; i+=2)
         반복문장


   for(int num=1; num <= 9; ++num)
	System.out.print(5*num + "    ")

   for(int n=5; n > 0; n--)
	System.out.println(n)

   for(int n=5; n > 0; n++)
	System.out.println(n)


   l-value = r-value
   변수        식

   double    int
   long       char
   int         (int)double   
   char       (char)int

   - 자동 형 변환
     (1) 정수에서 실수
     (2) 사이즈 적은타입에서 큰타입

   v1 + v2

   int   int   --> int
   long long --> long
   float float --> float
   int   double --> double
   int   char  --> int
   int   long  --> long
   long  float  --> float

   char  char  --> int

   - 중첩된 for 문 : 구구단

     						
   for : 횟수에 반복, 값의 변화에 따른 반복
   while : 조건에 따른 반복	

   for(초기식;조건식;증감식)
         반복문장;	

   초기식;
   while(조건식) {
         반복문장;			      
         증감식;
   }

   JAVA, [SQL], JavaScript, R, Scalar, (PYTHON)

   [ 자바의 산술 이항 연산의 특징 ] - 교재 92 페이지

   (1) int 타입보다 작은 타입들(byte, short, char)은 int 타입으로 변환하여 연산
   (2) 두 항의 타입이 다를 때 하나로 일치해서 연산(표현 범위가 적은 타입에서 큰타입으로)

        표현 범위의 관계 : int < long < float < double





  for( 변수선언  : 배열)





  [ 배열 : array ]
  - 동일한 타입의 데이터들의 집합
  - 배열을 만드는 방법
  - 배열을 사용하는 방법
  - 여러 개의 데이터들을 프로그램에서 다뤄야 할 때 변수를 여러개 선언하여 사용하는 것은
     비효율적이다.(코딩, 수행)

  - 배열을 만드는 방법
    - 배열로 구성하려는 데이터들의 타입
    - 배열로 구성하려는 데이터들의 최대 갯수

	new 데이터타입[크기]
  
  	new int[10]      	----- 0
	new char[26]	----- '\u0000'
	new double[5]	----- 0.0
	new long[1]  	----- 0L
             new boolean[10] 	----- false


	{ 값1, 값2, 값3, ... }  --> 배열 생성과 배열변수 선언을 동시에 할 때

	{ 10, 20, 30 }, {4,1,5,7,8,1,3}, {'a', 'b', 'c'}, {true}

   - 배열을 사용하는 방법
     배열을 사용하 위해서는 배열을 만든다음 변수에 담는다.
     배열변수가 필요하다.

     타입[ ]  변수명;, 타입  변수명[ ];

	int a1[];, int[] a2; char[] a3; boolean a4[];

	int a1[] = new int[10];
             int a2[] = {10,20,30};

	a1[0], a1[1], a1[2] .... a1[9]

	배열변수명[인덱스] // 인덱스는 0 부터 지정
            
             배열을 구성하는 데이터들 : 엘리먼트(element), 요소, 원소
             배열변수.length : 배열변수에 대입된 배열의 요소갯수

	System.out.println(a1[0]);
	System.out.println(a1[1]);
	System.out.println(a1[2]);
                            :
	System.out.println(a1[9]);

             a1[0] = 1000;
	a1[1] = 999;
	a1[9] += 10;

	for(int i=0; i < a1.length; i++)
	   System.out.println(a1[i]);
 
  System.out.println(), System.out.print()
  (1) 출력 데이터를 한 개만
  (2) 출력데이터 여러개일 때는 + 연산자로 결합하여 한 개로 전달해야
  (3) 출력하려는 데이터의 타입에 따라 출력 형식이 정해진다.
       int -> 10진수 숫자
       char -> 문자
       double -> 소수점 이하의 자리수를 설정불가


  Java 5(JDK 1.5)  - System.out.printf()
      		  System.out.printf("출력하려는포맷문자열")
		System.out.printf("가나다")
		System.out.printf("가나다\n")
		System.out.printf("가나다%n")
		System.out.printf("가나다")
		System.out.printf("가나%d다", sum)
		System.out.printf("가나%.2f다", avg)
		System.out.printf("가%d나%.3f다", sum, avg)
		System.out.printf("가%d나%.3f다", 100, 99.56789)
		System.out.printf("%s%s%s", "java", "c#", "c++")
		System.out.printf("%s %s %s", "java", "c#", "c++")
		System.out.printf("%s  %s  %s", "java", "c#", "c++")
		System.out.printf("%10s%10s%10s", "java", "c#", "c++")

   Sun Microsystems  ---> 2010 --> Oracle

   JDK 1.0 -> JDK 1.1 -> JDK 1.2 -> JDK 1.3 -> JDK 1.4 -> JDK 1.5(Java 5)

                                                                         C#
                                                                        (MS)
  [ 메서드 ]   

  -수행 코드(수행 명령, 수행 문장)를 정의하는 단위 : 기능
  -main 도 메서드이다.
  -클래스 안에 정의된다. 
  -하나의 클래스 안에는 0개 이상의 메서드가 정의될 수 있다.
  -메서드를 생성하는 방법
  -메서드를 사용하는 방법 - 호출 

  [ 메서드를 생성하는 방법 ]

  - 메서드명 : (1) 소문자로 시작하고 새로운 워드 등장시 첫 글자만 대문자로
	     (2) 식별자(명명) 규칙 적용
	     (3) 동사로 시작
  - 메서드 호출시 전달받을 데이터의 유무를 결정
     유 : 몇 개, 어떤 타입 -------> 매개 변수 선언
  - 호출된 후에 호출한 곳으로 값을 줄 것인지의 여부를 결정 -- 리턴값
     return 이라는 구문을 사용한다.

        [제어자] 리턴값의타입   메서드명([매개변수 선언]) {
	지연변수 선언;
	수행 문장.....

	[return 리턴값; ]
        }


   [ 메서드를 사용하는 방법 - 호출 ]

   (1) 기능
   (2) 헤더를 보고
        - 메서드명
        - 호출시 전달할 데이터(아규먼트)의 유무 
        - 리턴값의 유무에 따라서 리턴값을 사용

            변수 = 식

	result = System.out.println();
	rand = Math.random();


     - 배열 타입의 매개변수를 선언하여 메서드 호출시 배열을 아규먼트로 전달받으면
        전달받는 데이터의 갯수를 제한하지 않게 된다.

     - Java 5(JDK 1.5)
       가변형 아규먼트 구문이 추가된다.

       리턴타입 메서드명(int... p) { p를 배열로 사용한다.  }

       메서드명(1,2,3), 메서드명(1,2,3,4,5), 메서드명()

       new int[0]

    프로그램 아규먼트(명령행 데이터)
    프로그램을 수행 시작시키면서 최초에 한번만 전달되는 데이터들
    main(String[] args)
    (Intger.parsInt(), Double.parseDouble() 를 이용해서 숫자로 변환하여 사용한다.)













  [ 생성자 메서드:constructor ]

  - 클래스를 객체 생성할 때 호출되는 메서드 이다.
        new 클래스명()
              -------- 생성자 메서드
  - 모든 클래스는 1개 이상의 생성자 메서드를 가지고 있어야 한다.
  - 클래스의 소스에 생성자 메서드가 정의되어 있지 않으면 컴파일러가 생성자를
     만들어 준다. --> 디폴트 생성자
  - 생성자 메서드 정의 방법
    (1) 메서드명은 클래스명과 동일해야 한다.
    (2) 매개변수는 선택적이다.(오버로딩 가능하다.)
    (3) 리턴값의 타입은 생략한다.
    (4) 객체 생성시 수행해야 하는 기능 또는 객체 생성시 데이터를 전달받아서
          멤버변수들의 값을 초기화 하는 기능

  C:\unico\eclipse-workspace\javaexam\bin

      this : 자신의 객체의 참조값을 의미하는 리터럴
              this.xxxx 나의 멤버 xxxx

      this() : 생성자 메서드내에서만 호출 가능
                 생성자 메서드의 첫 행에서만 호출 가능
                 동일한 클래스내에 있는 다른 생성자를 호출

     int[] ary = new int[5];

     Product[] p = new Product[5];

      
  [ 방법 1 ]
  import day6.MethodLab3;
  class 클래스명 {
           main() 메서드 헤더 {
	int month = MethodLab3.getRandom(12);

           }
  }

  [ 방법 2 ]
  class 클래스명 {
           main() 메서드 헤더 {
	int month = day6.MethodLab3.getRandom(12);

           }
  }
  [ static(정적, 고정, 공유) ]
  - 제어자
  - 멤버변수와 메서드 앞에 지정 가능하다.
  - static 을 설정한 멤버변수와 메서드는 객체생성을 하지 않아도 자동으로 
     메모리 영역을 할당하 하거나 호출 가능 가능한 상태가 된다.
  - 다른 클래스에서 또 다른 클래스의 static 타입의 멤버를 사용할 때는
    클래스명.멤버명 으로 사용한다.
  - 클래스에 정의되는 멤버들중 어떤 멤버에 static 부여 하는가?
     변수(멤버)
     메서드
  
   -verbose:class : JVM 옵션
    클래스 로딩 정보를 보여주면서 자바 프로그램을 수행시켜라!!

   [ 블록 스코프 ]

   메서드 헤더 {
      int a;
      //int b;
      if( .... ) {
	int b;
      	 :
      }

      int c;
      int b;


   }

   [ 표준입력 ]

   - 프로그램이 수행하는 동안 필요로 하는 데이터를 시스템의 표준 입력 장치로 부터 
      받아 오는 것 
      표준 입력 장치 - 키보드
   - Java에서는 표준 입력을 어떻게 처리 하느냐... --> System.in
             
	System.in.read()
         
     Java 5(JDK 1.5)
     java.util.Scanner 클래스를 제공하여 좀더 편하게 데이터 입력받을 수 있게
     API를 추가했다.

	Scanner scan = new Scanner(System.in);

	scan.next()
	scan.nextLine()
	scan.nextInt()
	scan.nextDouble()
		:


    
  
    cc\n





   Scanner - next(), nextInt(), nextDouble(), nextLine()

      readLine() : String


   aaa  bbb      ccc    ddd\n


   aaa\n  
   bbb\n      
   ccc\n    
   ddd\n
   [ 상속 ]
   - 자바의 모든 객체들은 상속이라는 객체지향언어의 특징을 지원한다.
   - 자바에서 생상되는 모든 객체들은 기본적으로 java.lang.Object 이라는 객체를
      상속하게 된다.
   - 클래스 헤더에 exetdns 라는 절을 사용하는 부모 클래스를 설정하는데
      하나의 부모 클래스만 설정 가능하다.
   - 조상부터 물려받은 메서드들은 필요에 따라 대체할 수 있다.- 메서드 오버라이딩이라 한다.
   - 어떤 클래스든 객체를 생성하면 해당 클래스만 메모리 할당하는 것이 아니라
      조상 클래스들도 메모리 할당한다.
   - 자손클래스의 객체 생성시 생성자 메서드가 호출되면 바로 조상 클래스의 생성자도 호출
     된다. 내부적으로는 아규먼트 없는 생성자가 호출되는데 다른 생성자를 호출하려는 경우
     super() 라는 메서드를 사용한다.
   - 객체를 참조하는 용도 : this, super
   - 객체를 초기화하는 용도로 사용되는 생성자 메서드 호출 : this(), super() 
   - this(), super() : 생성자 안에서만 호출 가능
   - this, super : 객체 생성 시점에 초기화 된다. static 메서드에서는 사용 불가하다.
                       non-static 메서드와 생성자 메서드에서만 사용 가능하다.

   [ 제어자 : modifier(수정자, 한정자, 제어자) ]

   접근 제어자 : public, protected, (default), private
   활용 제어자 : final, static, abstract, transient, synchronized, .....
                    -----
   제어자란 클래스, 메서드, 변수앞에 설정되어 접근 가능 여부와 사용 방식을 제어하는 구문

               [제어자] class 클래스명 extends 부모클래스명 {
		[제어자]멤버변수 선언

		[제어자]생성자 메서드 정의

		[제어자]메서드 정의
               }   

	 public, final, abstract class 클래스명 extends 부모클래스명 {
		모든접근제어자, final, static 멤버변수 선언

		모든접근제어자 생성자 메서드 정의

		모든접근제어자, static, final, abstract 메서드 정의
               }          

	- 클래스에는 접근제어자를 두 가지만 설정 가능 : public, (default)
                   public 클래스 : 누구나
                   (default) 클래스 : 동일 패키지내의 클래스 
             - final - 변경할 수 없는, 마지막의
                abstract - 반드시 변경해야 하는, 마지막 아닌, 미완성의
                final 클래스 : 상속 불가, 객체 생성 가능
                abstract 클래스 : 객체 생성 불가, 상속만 가능    
           
             -   public  -  누구나
	    protected - 동일패키지 이거나 자손이면 접근 가능
	     (default) - 동일 패키지	          	 
	    private - 자손이든 객체 생성한 클래스든 접근 불가
                               멤버가 정의된 클래스 내에서만 사용 가능


                 +  : public
                 #  : protected
	    (), ~ : (default)
                 - : private

            - static, final을 함께 지정하여 상수를 만든다.

	 public class Math {
		public final static double PI = 3.14159;

              }

	Math.PI

	Integer.MAX_VALUE

	- 메서드에
	   final : 자손에 의해 오버라이딩이 불가능한 메서드를 정의
	   abstract : 자손에 의해 반드시 오버라이딩 해야 하는 메서드를 정의
		     메서드의 헤더만 정의되고 바디가 없는 메서드






     ==
   숫자나 문자는 등가 연산자로 값이 동일한지 비교 가능하지만
   문자열은 등가 연산자로 비교할 수 있는 경우도 있지만 일적으로
   API를 사용해야 한다.

   equals() 메서드를 사용해야 한다.
   String 클래스가 제공

   자바는 문자열 리터럴은 String 객체로 취급된다.

   'y' : char 타입, 기본형
   "y" : String 타입, 객체형(참조형)

   "y".equals("...")



  다형성, abstract 클래스, 인터페이스, 예외처리
  [ 다형성 ]

  참조형 변수(클래스 타입)는 타입에 지정된 클래스 객체뿐만 아니라 타입에 지정된 클래스의
  자손의 객체도 참조할 수 있다.

	A obj;
	obj = new A();
	obj = new B();
	obj = new C();
  

         void 메서드(A obj ) {

         }


       	Objcet o = new Date();
     	Date d = new Date();
	Member m = new Date(); (X)








    강사컴 IP 주소 : 70.12.115.160
    강사컴 접근 방법 : 시작메뉴에서 오른쪽 버튼 -> 실행 메뉴 -> \\70.12.115.160

    학습 환경 준비 : 
    (1) 크롬 브라우저 설치
    (2) JDK 설치
    (3) 환경 변수 세팅 : JAVA_HOME, Path 환경 변수
         (C:\Program Files\Java\jdk1.8.0_231, %JAVA_HOME%\bin)
         윈도우즈 탐색기에서 내PC에 마우스 올리고 오른쪽 버튼 클릭후 속성 메뉴 선택 
         시스템 정보 창이 출력되면 왼쪽에 '고급 시스템 설정' 메뉴 선택
         시스템 속성창이 출력되면 환경변수 메뉴를 선택한 후에 
         환경 변수를 설정한다.
         설정 후에는 cmd 창을 기동시켜서 javac 라는 명령을 수행시켜 제대로 설정되었지 확인
    (4) 이클립스 설치
         적당한 디렉토리에 이클립스 압축 파일을 푼다.
         이클립스를 기동 시킨다.(워킹 디렉토리는 본인이 원하는 곳으로)

    (5) 백업한 javaexam 폴더는 c:\Temp에 저장해 놓는다.
    
    ---> 이후 과정은 모두 함께 진행할 예정임...
         
   [ 인터페이스 ]

   - 클래스, final 클래스, abstract 클래스
   - 인터페이스는 모든 메서드가 abstract 메서드인 클래스를 의미한다.
   - 자바는 단일 상속을 지원하는 OOP 언어이다.
      모든 메서드가 abstract인 클래스를 상속한 경우 다른 클래스는 상속 불가
      ----> 인터페이스는 추가 상속이 가능은 특별한 형태의 클래스이다.
   - 인터페이스는 abstract 클래스와 비슷한 자바 프로그램의 구조로서
      객체 생성은 불가하고 상속으로만 사용이 가능하다.
   - 인터페이스 생성 방법

	interface 인터페이스이름 {
		상수
		abstract 메서드
             }

   - 인터페이스 사용 방법 : 상속

	interface 인터페이스이름 extends 부모인터페이스이름 {
		:
	}

	class 클래스명 extends 부모클래스명 implements 부모인터페이스이름 {


	}
	









    JDK 1.0  JDK 1.1
      8개        23개

    java.nnn    - 기본
	java.lang, java.util, java.io, java.net, java.sql.....	   
    javax.nnn  - 확장
             javax.sql, javax.nio....

    -------> 자바언어에서만 지원하는 API
    org.nnn     -
    -------> 자바에서만 지원하지 않고 다른 프로그래밍 언어에서도 지원되는 API로
                 어떤 표준화 위원회나 조직에서 정한 API를 자바에도 지원하기 
                 위해 만든 API
    
  [ 오류 처리 ]
   - 컴파일 오류 : 구문오류, API 사용 오류
   - 실행 오류 : 에러 - JVM 영역에서 발생하는 오류로서 치명적이라
                             JVM이 프로그램 실행을 중단시키고 callstack 정보를 화면에 출력한다.
	                미리 예측하고 대비하는 코드를 작성 불가
	       예외 - 자바 프로그램 영역에서 발생하는 실행 오류로 다소 가벼운 잘못된 상황
                             런타임 예외 - 발생 원인이 프로그램 코드 - 버그 - 예외 처리 선택
		   일반 예외 - 발생 원인이 외부적인 요인이다. - 예외 처리 필수 
   - 예외 처리 방법
     1. 적극적인 예외 처리

	try {
	      예외가 발생할 수도 있는 코드

   	} catch (처리해야하는 예외 클래스의 변수선언) {
                   처리 코드
	} finally {
	      예외 발생 여부와 관계없이 마지막에 수행을 보장하는 코드
             }

     2. 소극적인 예외 처리
	
	메서드 헤더에 'throws 처리해야하는 예외 클래스' 절을 추가

   - 예외 발생

           throw 발생시키고자하는예외클래스의객체

	throw new IOException(["예외메시지"])

           예외를 발생시키는 코드를 가지고 있는 메서드는 헤더 throws 절을 사용해서
           이 메서드는 호출시 예외가 발생할 수도 있다는 것을 알려야 한다.


















  1시 20분부터 Java API 활용 공부합니다.







  java.lang - Object, Math, Integer, String, StringBuffer, Character ...

	String : 문자열 처리와 관련된 메서드들을 가지고 있다.
                        String 객체가 생성된 이후 초기화된 문자열 내용은 변경 불가하다.	 
                        읽기 용도로만 사용 가능하다.

	           "abc" + "가나다"  -> "abc가나다"

	           "a" + "b" + "c" + "d"

	StringBuffer : 문자열 편집하는 용도

		StringBuffer sb = new StringBuffer();
		sb.append("a");
		sb.append("b");
		sb.append("c");
		sb.append("d");

	equals() : Object 클래스 : == 연산과 동일

	Book b1 = new Book("짱구", "xxx", 10000);
	Book b2 = new Book("짱구", "xxx", 10000);
	Book b3 = b2;

	b1 == b2 ? false
             b3 == b2 ? true
	b1.equals(b2) ? false
	b3.equals(b2) ? true


  API : Application Programming Interface(라이브러리, 패키지)
         자주 사용되는 기능을 미리 만들어 놓은 프로그램
         자바 : 클래스, abstract 클래스, 인터페이스..
         C : 함수


   필답평가>비NCS전공교과>Java기반의프로그래밍기초 : 4시 ~ 4시 30분

   수행평가>비NCS전공교과>Java기반의프로그래밍기초

   --- 강사컴퓨터의 공유폴더에 수행평가>자바 폴더에 있는 test 패키지를
        내 이클립스의 src 폴더에 복사한 후에 문제에서 제시된 기능을
        각각의 클래스의 코드로 채워 넣는다.


  70.12.115.160

  Collection API : 데이터들을 저장하여 사용하는 방의 역할을 하는 API


   - 저장할 수 있는 데이터의 타입에 제한이 없다.
   - 저장할 수 있는 데이터의 갯수에 제한이 없다.

   List - 저장되는 데이터의 순서를 유지한다.
            저장되는 데이터의 중복을 허용한다.
            ArrayList, LinkedList, Vector

   Set - 저장되는 데이터의 순서를 유지하지 않는다.
            저장되는 데이터의 중복을 허용하지 않는다.
            HashSet, LikedHashSet


   Map - 데이터 이름과 데이터 값을 쌍으로 저장한다.
            데이터 이름은 중복저장이 불가능하다.
            (키)
            key-value 쌍으로 데이터 저장
           	HashMap, Hashtable

   Collections 클래스 : Collection API 들을 도와주는 도우미 클래스


    import java.util.LinkedList;
    import java.util.Iterator;

    --->

    import java.util.*;


  [ 문자셋(charset) ]

  ASCII : 0x00~0x7f(1byte)
            0x41~ 영문 대문자, 0x61~ 영문 소문자....

  
  ~1986 년 : 표준화된 한글 코드가 없었다.
                 컴퓨터마다 한글 코드가 달랐다.
  ~1987 년 : 표준화된 한글 코드 : 완성형 한글 코드 : KSC5601 : 영문(1byte:ASCII), 한글(2byte)
                                                                   (EUC-KR, MS949(CP949))
					   0xB0A1~ 가...
					   native code
   .........

  1990년 : 전세계의 나라언어 코드를 통일하자 : unicode : 2바이트 : utf-16, utf16
                                                                          A : 0x0041, 가 : 0xAC00
                                                                          1~4바이트 : utf-8, utf8
					          A : 0x41, 가 : 0xEAB080													

  OS - MS949   
  Java - utf-16
  Web - utf-8                                                       


                 



  [ 입출력(I/O) 프로그래밍 API ]

  - java.io, javax.nio
    -------
  - File : 시스템에 존재하는 파일에 대한 처리, 정보 추출....
  - 입력용 API, 출력용 API
  - 입력 단위 : 바이트 단위, 문자 단위
                      (1.0)         (1.1)
	             ----------> InputStreamReader
  - 스트림 이라는 논리적인 구조 이용한다.
    입력 스트림과 출력 스트림으로 구분한다.
  
  - xxxInputStream, xxxOutputStream : 바이트 스트림
    xxxReader, xxxWriter : 문자 스트림

  - 문자스트림
     
    FileReader, FileWriter - 파일 오픈 기능
    BufferedReader, BufferedWriter

  - 바이트스트림
    FileInputStream, FileOutputStream - 파일 오픈 기능
    DataInputStream, DataOutputStream
    ObjectInputStream, ObjectOutputStream

  - InputStreamREader, OutputStreamWriter





 

     \s  : 공백
     * : 0개 이상

     ab*




    





  I18N : 국제화


Java 구문 - SQL - JDBC -  HTML5 - CSS3 - JavaScript(jQuery) - Ajax
Servlet - JSP - Spring - Mybatis - D3.js(웹 기반 시각화) - 1day 게시판 프로젝트 -
미니프로젝트
리눅스(CentOs7) - Hadoop 2.x.x(설치,설정, HDFS, MapReduce) - Hive - Spark
- R(구문, 데이터 수집(웹크롤링,공공DB,SNS Open API), 통계분석, 데이터마이닝, 
  텍스트마이닝,시각화) - Java와 R 연동
팀프로젝트 : 빅데이터를 가지고 분석하여 웹으로 서비스하는 모델


[ Oracle 설치 ]

  DQL --> DML  --> DDL
  CRUD
  Create : INSERT 명령어
  Read : SELECT 명령어(DQL)
  Update : UPDATE 명령어
  Delete : DELETE 명령어

  관리자계정(system) 암호 : manager


  서버와 클라이언트
           ---------
           (1) cmd 창에 나가서 sqlplus 라는 명령을 수행시킨다.
           (2) sqldeveloper 라는 추가프로그램을 설치하여 사용
  
  학습용 일반계정 : scott(생성), hr(락해제)



(1) sqlplus 라는 명령으로 오라클 사용하기 
cmd 창을 기동시킨다.
sqlplus 
[ scott 계정 생성 ]
SQL> @C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql
SQL> alter user scott identified by tiger;
SQL> select user from dual;  // scott 이라고 출력될 거임
SQL> select * from tab;        // scott 계정이 보유하고 있는 테이블 리스트
SQL> connect system/manager

[ hr 계정 락(lock) 풀기 ]
SQL> alter user hr account unlock;
SQL> alter user hr identified by hr;
SQL> connect hr/hr

[ jdbctest 계정 만들기 : JDBC 수업시간에 사용 ]
SQL> create user jdbctest identified by jdbctest;
SQL> grant connect, resource to jdbctest;


SQL> alter user scott account unlock;


  [ SELECT 명령어 ]

  select 추출하려는컬럼명리스트 또는 *
  from 테이블이름
  [where 행의조건식]
  [order by 컬럼명(별칭,식) desc|asc]
 
  
  select * from tab;

  select * from emp;
  select *
  from emp; 
  select ename, sal from emp; 
  select sysdate from dual;
  select 100+200 from dual; // 1행 1열 ('x')

  select ename, sal 
  from emp
  where sal > 2000
  order by sal desc;

  select ename, sal 
  from emp
  where sal > 2000
  order by sal [asc];

  where num = 10
  where name = '김정현'
  where hiredate = '1997/10/21'
  where name = 'KIM'
  where name = 'kim'
  where name like '김%'   // 0개 이상의 모든 문자(들) - meta character
  where addr like '%강남구%'   // 0개 이상의 모든 문자(들) - meta character
  where addr like '강남구%' 
  where addr like '%강남구'
  where name like '김__'  // 임의의 문자 1개
  where ssn like '______-2______' 
















   















 컬럼들을 결합하는 연산자 -  ||

select 컬럼1 || 컬럼2 "별칭"

select concat(컬럼1, 컬럼2) "별칭"

select 컬럼1 || ', ' || 컬럼2 "별칭"


  21번까지만 문제 풀고 제출하세요.

  rr/mm/dd  - 기본설정 날짜 포맷

  yy/mm/dd
   

  select to_char(sysdate,'yyyy"년"') 
  from dual;

  select to_char(sysdate,'mm"월" dd"일" day') 
  from dual;

  select to_char(sysdate,'yyyy"년" mm"월" dd"일" hh"시" mi"분" ss"초"') 
  from dual;

  sal * 12 + comm
  sal * 12 + nvl(comm, 0)

  select enmae, sal, nvl(to_char(comm), '없음') from emp;
  select enmae, sal, nvl(comm, 0) from emp;

  select enmae, sal, nvl2(comm, '정해짐', '미정') from emp;

  decode(대상식, 비교값1, 처리식1, 비교값2, 처리식2, ...., 처리식n)
  switch(대상식, 비교값1, 처리식1, 비교값2, 처리식2, ...., 처리식n)

  @C:\교육자료\실습문서\scott_create_table.sql
  @c:/교육자료/실습문서/scott_create_table.sql


  SELECT MAX(SAL), MIN(*), SUM(ALL SAL), AVG(*), COUNT(SAL) FROM EMP

  SELECT EMPNO, ENAME FROM EMP

  SELECT EMPNO, ENAME, SAL, COMM FROM EMP

  SELECT ENAME, MAX(SAL) FROM EMP  --> 오류 발생

  SELECT COUNT(COMM), COUNT(*) FROM EMP

  SELECT *
  FROM EMP
  WHERE SAL > (전체 월급의 평균을 구하는 SELECT명령)

  SELECT *
  FROM EMP
  WHERE SAL > (SELECT AVG(SAL) FROM EMP)



  select nvl2(deptno, deptno||'번 부서', '미정') 부서정보, count(*)||'명' 직원명수
from emp
group by deptno;


select decode(deptno, 10, '10번 부서', 20, '20번 부서', 30, '30번 부서', '미정') 부서정보, count(*)||'명' 직원명수
from emp
group by deptno;


select case deptno 
         when 10 then '10번 부서' 
         when 20 then '20번 부서' 
         when 30 then '30번 부서' 
         else '미정'end 부서정보, count(*)||'명' 직원명수
from emp
group by deptno;

select case  
         when deptno = 10 then '10번 부서' 
         when deptno = 20 then '20번 부서' 
         when deptno = 30 then '30번부서' 
         else '미정'end 부서정보, count(*)||'명' 직원명수
from emp
group by deptno;


select * from emp, dept;

select * from emp, dept where emp.deptno = dept.deptno;

select * from emp, dept where emp.deptno = dept.deptno(+); -- left outer

select * from emp, dept where emp.deptno(+) = dept.deptno; -- right outer

select * from emp, dept where emp.deptno(+) = dept.deptno(+); -- 지원(x)


select * from emp, dept where emp.deptno = dept.deptno(+)
union
select * from emp, dept where emp.deptno(+) = dept.deptno;

select * from salgrade;

select * 
from emp, salgrade 
where emp.sal between salgrade.losal and salgrade.hisal;

select * 
from emp e, salgrade s 
where e.sal between s.losal and s.hisal;








 select  e.ename, m.ename
 from emp e, emp m
 where e.mgr = m.empno;
 
 
 select  e.ename, nvl(m.ename, '없음')
 from emp e, emp m
 where e.mgr = m.empno(+);

 (1)
  select
  from 테이블1 join 테이블2 using (조인에사용할컬럼명)
  where 행에 대한 조건

 (2)
  select
  from 테이블1 join 테이블2 on (조인 조건식)
  where 행에 대한 조건

 (3)
  select
  from 테이블1 left join 테이블2 using (조인에사용할컬럼명) 또는 on (조인 조건식)
  where 행에 대한 조건

 (4)
  select
  from 테이블1 right join 테이블2 using (조인에사용할컬럼명) 또는 on (조인 조건식)
  where 행에 대한 조건

 (5)
  select
  from 테이블1 full join 테이블2 using (조인에사용할컬럼명) 또는 on (조인 조건식)
  where 행에 대한 조건

 select 컬럼리스트|*
 from 테이블명
 where 컬럼 = 정해진값|이미알고있는값

 select 컬럼리스트|*
 from 테이블명
 where 컬럼 = (select 명령)

 select *
 from emp
 where sal > (1200);

 select *
 from emp
 where sal >ALL (1200,2975);

              >ALL, >ANY, <ALL, <ANY, IN(NOT IN), =ANY

              >, <, =, !=

           컬럼   < ANY (10, 5, 7, 6)
           컬럼   < ALL (10, 5, 7, 6)




  select * from emp where 1 <> 1

  비어있는 resultset

[ 오라클의 휴지통 기능 ]

휴지통에 들은 테이블을 조회.
SQL> show recyclebin;

휴지통의 모든 내용이 비워집니다.
SQL> purge recyclebin;

삭제된 테이블을 되살리고 싶다면
SQL> flashback table 테이블명 to before drop;

특정 테이블을 휴지통에 남기지 않고 모두 삭제하려면..
SQL> drop table 테이블명 purge;

purge문 없이 그냥 drop 한 후에는
SQL> purge table 테이블명;

select * 
from user_constraints 
where table_name = '테이블명(대문자)';


SELECT A.TABLE_NAME, B.COLUMN_NAME, 
           A.CONSTRAINT_NAME, A.CONSTRAINT_TYPE, 
           A.SEARCH_CONDITION
FROM USER_CONSTRAINTS A, USER_CONS_COLUMNS B
WHERE A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
AND A.TABLE_NAME = '테이블명(대문자)'
AND A.CONSTRAINT_TYPE = 'P';

 [ JDBC(Java DataBase Connectivity) 프로그래밍 ]
 - Java API
    java.sql
    javax.sql
 - DBMS 에 무관하게 프로그램을 개발할 수 있다.
 - 구성 : JDBC API   + JDBC Driver
           (인터페이스)  (인터페이스들의 구현클래스)
            DBMS에무관  DBMS에 따라 달라진다.
   팩토리메서드 : 객체 생성을 대신 해주는 일반 메서드

   SQL 명령을 수행시키는 기능을 지원하는 객체 - Statement
                                    executeQuery():ResultSet - SELECT
		          executeUpdate():int - 그외의 모든 SQL	
   Statement stmt = Connection 객체의 createStatement();
 - JDBC 프로그램의 구현 순서
    1. JDBC Driver 로딩 - Class.forName()
    2. DBMS 에 접속 - DriverManager.getConnection("jdbc url", "계정", "암호")
    3. Statement/PreparedStatement 객체 생성
    4. 처리하려는 기능에 따라서 SQL 문을 전달하고 수행시킨다.
    5. 결과 처리
        ResultSet 객체
        next(), getXXX()
        SELECT 명령의 수행 결과 여부에 관계없이 ResultSet 객체는 리턴
    6. 종료시 close() 필수

  JDBC 프로그램 패키지 : jdbcsrc
  ReadVisitor



   [ URL ]
   URL - 인터넷 사이트(웹 사이트, 웹 페이지)의 주소 문자열
           -------------------------------------------> http URL
            Uniform Resource Locator의 약어로 어떤 자원의 위치를 알리는
            단일화(규격화)된 형식의 문자열

            프로토콜명:...........................

            프로토콜 : 통신 규약

            	http(s)://www.naver.com/
	http://www.html5test.com/
	http://www.w3schools.com/
	http://www.w3.org/

            jdbc url : 어떤 DBMS를 어떤 JDBC Driver를 통해서 접속할 것인지 하나의
                           문자열로 구성

         	jdbc:DBMS이름:JDBCDriver이름:Driver에서원하는대로
             jdbc:oracle:thin:@DBMS네트워크주소:리스너포트번호:SID




   DatabaseMetaData - 접속된 DB에 대한 정보, JDBC드라이버에 대한 정보 추출/채크
   ResultSetMetaData - SELECT 명령을 수행하고 생성된 ResultSet 객체에 대한 정보
                                 를 추출

   pid - 00004
   classid - 20
   name - 짱구는 못말려
   balance - 100
   price - 5000



   00004 20 "짱구는 못말려" 100 5000
   00005 20 "겨울 왕국" 150 8000


   필답평가 시간 : 2시 10분~2시 30분

   수행평가 시간 : 2시 30분~4시
                       제출시... sql 파일과 java 파일을 교육생이름.zip 으로 압축해서
                       올리세요.
                       구현을 완료하지 못해도 4시까지는 제출해 주세요.
                       Prob.java 는 강사컴퓨터의 수행평가 폴더에서 복사하여 구현합니다.

   -------> 4시 10분 부터 수업 시작


   10. 'Den'과 동일 부서에서 근무하는 직원들의 최대월급, 최소월급 그리고 월급의 평균을 구하시오.
 단, 평균값을 출력할때 십단위까지만 출력하시오.


 [ Web 프로그래밍 기술 학습 ]

  - 프로그램이 실행하는 위치
     Web 서버 프로그래밍 - Web 클라이언트(브라우저)가 요청했을 때 서버에서 실행
		       Servlet, JSP, Spring, Mybstis
     Web 클라이언트 프로그래밍 - Web 클라이언트가 요청했을 때 클라이언트에서 실행
		       HTML5, CSS3, JavaScript, jQuery, Ajax

  - 테스트 환경
     Web 클라이언트 역할의 프로그램 : 브라우저(크롬)
     Web 서버 역할의 프로그램 : Servlet, JSP를 처리할 수 있는 서버
                                        WAS(Web Application Server)
                                        ----> Tomcat 9.0
				http://tomcat.apache.org/
     Eclipse - Web Project - edu

                   imsi.html

     http://localhost:8000/edu/imsi.html   --> URL 문자열
                                   --------------
                                          URI
   

 [ web 프로그래밍 학습 동안의 아침에 해야할 시스템 준비 ]

 (1) 이클립스를 기동한다.
 (2) 톰캣을 기동한다.

  http://localhost:8000/edu/htmlexam/exam1.html

  gif, jpg(jpeg), png

  http://localhost:8000/edu/htmlexam/...?gname=unico
                                                            ------------
				        Query String


  http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80%EB%82%98%EB%8B%A4
  http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80&gage=10
  http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80+ABC123&gage=10

  Query String : Web Client 가 Web Server 에게 정보(페이지)를 요청할 때 함께 전달
                      가능한 name 과 value 구성되는 문자열
                      W3C 가 정해놓기를 ---> Query String Encoding 규칙
                      (1) name=value 로 구성되어야 한다.
                      (2) 여러개의 name=value를 전달하는 경우에는 & 기호로 분리한다.
                      (3) 영문과 숫자 그리고 일부 특수문자를 제외하고는 %기호와 코드 값
                            으로 전달된다.
                      (4) 공백 + 기호로 전달된다.

http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80&gage=1&gdate=2020-04-05


http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80&gage=5&gdate=2020-01-06&gender=on&food=on&food=on&food=on
http://localhost:8000/edu/htmlexam/...?gname=%EA%B0%80&gage=3&gdate=2020-02-01&gender=female&food=%EB%96%A1%EB%B3%B6%EC%9D%B4&food=%ED%8A%80%EA%B9%80&food=%EA%B9%80%EB%B0%A5

http://html5test.com/



       
  

  <form method=""  action="...">


  파일명 : productlog.html


   HTML 1.0 -> HTML 2.0 -> HTML 3.2 -> HTML 4.0 -> HTML 4.01 -> HTML 5
                                                                          XHTML 1.0


   cssexam

   [ 전역적인 스타일 설정 ]

   - <head> 태그안에 <style> 태그를 사용한다.
   - CSS 정의 방법

	CSS선택자 {
	     CSS속성명 : 속성값;
	     CSS속성명 : 속성값;
	     CSS속성명 : 속성값;
                  CSS속성명 : 속성값;
	}

   [ CSS 선택자 ]

   	- 전체 선택자
             - 태그 선택자
	- class 선택자
	- id 선택자
	- 자식 선택자
	- 자손 선택자
	- 첫번째 동생 선택자  
	- 동생들 선택자
             - 속성 선택자


    CSS 를 다르게 적용하려는 태그(들) 또는 태그의 컨텐트에 정의하는 용도의 태그들
    <div> : 여러 태그들을 묶거나 또는 태그에 대하여 CSS 속성을 적용할 때
    <span> : 컨텐트의 일부분에 대하여 CSS 속성을 적용할 때








   img[src]
   img[src=duke.png]
   img[src$=png]

   E:nth-child(n)
 	부모의 n번째 자식이면서 E 태그

   E:nth-of-type(n)
	부모의 E 태그에 해당하는 자식 태그중 n번째

 
  http://unico2013.dothome.co.kr/resweb/exam3.html

   display : none, block, inline, inline-block



  [ JavaScript 구문 ]
  1. JavaScript 코드 작성 방법
  2.데이터타입과 변수선언
    ---------
       숫자,문자열타입, 논리타입, 객체타입(배열타입), undefined 타입
       var 변수명;
       var 변수명=초기값;
       	var v1;
	v1 = 10; // number
	v1 = '10'; // string
	v1 = true; // boolean
             -----------------------------> typeof 연산자가 필요
  3. 연산자 (Java와 85% 비슷) ---> ==, ===, !=, !==, &&, ||, delete, typeof ..
  4. 제어문 : for, foreach, while, do ~ while, break, continue
  5. 함수의 정의와 활용
  6. 객체의 생성과 활용(생성자 함수, 객체리터럴)
  7. 예외처리
  8. API
      표준API : 함수, 생성자 함수
      BOM(Browser Object Model) API : 브라우저가 자바스크립트에게 제공하는
                                                    것으로 내장 객체 형식
      DOM(Document Object Model) API                                  
      HTML5 API - Canvas,WebStorage,drag&drop,geolocation







 [ 웹페이지를 디자인 할 때 ]
  
 (1) PC만
 (2) 모바일만
 (3) PC, 모바일 : 반응형 웹디자인 - www.w3schools.com
                      PC 디자인, 모바일 디자인 분리 - www.naver.com
                                                              m.naver.com



   for(변수선언 : 컬렉션 또는 배열 객체)

   for(변수선언 in 배열 객체 또는 일반 객체)

     비교식1 && 비교식2 

     비교식1 || 비교식2 

    -------------------------> && 와 || 를 이용해서 if문을 대신하여 구현 가능

	if( a>b )
	    System.out.println(a);

             if( a>b )
	    window.alert(a);
             ----> a>b && window.alert(a);
                      a<=b || window.alert(a);



   window.alert() 	- 경고 메시지를 출력하는 서브창을 디스플레이
   window.prompt() - 사용로 부터 데이터를 입력받는 서브창을 디스플레이
   window.confirm() - 확인받는 목적으로 사용되는 API 로서
                               yes/no 형식의 데이터 입력받는 서브창을 디스플레이


   오늘은
   화    요일
   입니다.

    오늘은 화요일 입니다.

   오늘은<br>
   화요일<br>
   입니다.<br>
   <pre>
   오늘은
   화요일
   입니다.
   </pre>


   [ 숫자 문자열을 숫자로 변경하는 방법 ]

   num = num * 1;

   num = Number(num);

   num = parseInt(num);


  [ 배열 ]
  (1) 다양한 타입의 데이터를 하나의 배열에 구성 가능
  (2) 배열 생성 후에도 크기 변경 가능

   - 생성
     - 배열 리터럴
     var a1 = [ ];
     var a2 = [ 10, 20, 30 ];                              a2[10] = 100; 
     var a3 = [ true, '가나다', 100 ]
     a1.length
     a2.length
     a3.length
     a3[1]

     - 표준 API(Array 라는 생성자 함수를 이용)
     var a4 = new Array();
     var a5 = new Array(10); // 배열의 크기
     var a55 = new Array('abc');
     var a6 = new Array(10,20);
     var a7 = new Array(true, 3.5, 'aaa', 'aa');
   

    var a = [ 10, 3, 7, 20, 6 ];
    a.sort() --> [ 10, 20, 3, 6, 7 ]

          [ 3, 6, 7, 10, 20 ]


           
    함수 : 수행 문장들을 담고 있는 호출 가능 모듈, 단독으로 호출 가능
    메서드 : 수행 문장들을 담고 있는 호출 가능 모듈, 객체를 통해서만 호출 가능
               객체의 멤버 정의되는 함수
    전역코드 : <script>수행문장들...</script>

    [ 명시적(선언적) 함수 정의 ]

     function 함수이름([매개변수 선언..]) {


     }

    [ 리터럴(표현식) 방식(익명) 함수 정의 ]

     function([매개변수 선언..]) {


     }([아규먼트..]);   

     함수(function([매개변수 선언..]) {


     });

     var 함수명 = function([매개변수 선언..]) {


     };

     함수명([아규먼트..]);

     var 함수명2 = 함수명;

     함수명2([아규먼트..]);
   


     obj.속성명(r-value, l-value), obj['속성명']
     obj.속성명()

 BOM - window, document, location, history, navigator, screen


 location.href  :  페이지 이동을 구현하고자 할 때
 location.reload()  : 현재 페이지를 재요청

 navigator.userAgent : 이 페이지를 랜더링하고 있는 클라이언트 머신과 
                                브라우저 정보를 하나의 문자열로 추출

 DOM(Document Object Model) 
 브라우저의 HTML 파서가 서버로 부터 전달받은 HTML 문서의 내용을 파싱하고
 랜더링할 때 인식된 HTML 태그, 속성 그리고 텍스트로 구성된 컨텐츠를 하나하나
 JavaScript 객체로 생성한다. 이 때 만들어지는 DOM 객체들(Element 객체, Text
 객체) 부모 자식 관계를 유지해서 트리 구조를 형성한다.
 --> JavaScript 코드로 HTML 태그나 속성 그리고 컨텐츠를 읽거나 변경할 수
       있게 지원해서 동적인 웹 페이지를 생성

 (1) 필요한 태그를 찾는 방법
	document.getElementsByTagName("태그명") : NodeList
             document.getElementById("태그의id속성의값") : Node
	document.getElementsByClassName("태그의class속성값") : NodeList

	document.querySelector("CSS선택자") : Node
	document.querySelectorAll("CSS선택자") : NodeList

 (2) 태그의 내용이나 속성을 읽고 변경하는 방법, 삭제하는 방법

	찾은Element객체.innerHTML
	찾은Element객체.textContent
	찾은Element객체.getAttribute("속성명")
	찾은Element객체.setAttribute("속성명", 속성값)
	찾은Element객체.removeAttribute("속성명")
	찾은Element객체.속성명
	찾은Element객체.속성명 = 속성값
		:


 (3) 태그에서 발생하는 이벤트 또는 브라우저 객체서 발생하는 이벤트(window)
      에 대한 이벤트 핸들러 구현 방법

      (1) 인라인 이벤트 모델
	
             <button onclick="코드">1</button>

      (2) 전역적 이벤트 모델(고전 이벤트 모델)\
	<button>2</button>

	var dom = document.getElementsTagName("button")[0];
             dom.onclick = function() { 코드 };
             dom.onclick = null;

      (3) 표준 이벤트 모델
	<button>3</button>

	var dom = document.getElementsTagName("button")[0];
             dom.addEventListener("click", function() { 코드 });
	dom.removeEventListener("click", function() { 코드 });

       
       이벤트 : 웹 페이지상에서 마우스, 키보드 등을 통해 발생하는 액션
                  웹 브라우저에서 자동으로 발생하는 액션
       이벤트 핸들러(리스너) : 이벤트가 발생했을 때 수행되는 기능을 구현한 함수
       이벤트 타겟 : 이벤트가 발생한 대상 DOM 객체
                        ((1)this, (2) 핸들러에 매개변수(e)를 하나 정의한 후 : e.target)


     data-xxx  :  사용자가 필요에 의해 태그에 정의하는 속성

     [ 디폴트 이벤트 핸들러 ]

     HTML 태그에 디폴트로 등록있는 이벤트 핸들러를 의미한다.
     태그에 따라서는 눈에 띄는 디폴트 이벤트 핸들러 가지고 있다.
     <a> : click 이벤트에 대한 핸들러를 내장 하고 있다.
     <form> : submit 이벤트에 대한 핸들러를 내장하고 있다. 

	<a href="http://java.sun.com/">...</a>
	<a href="test.html">...</a>
	<a href="#memo">...</a>                     #앵커명
	<a href="test.html#subject">...</a>

             <a name="memo></a> 

      [ 이벤트 버블링 ]

      특정 DOM 객체에서 이벤트가 발생하면 그 DOM 객체에 등록된 이벤트 핸들러만 
      수행되는 것이 아니라 조상 DOM 객체에 등록된 핸들러도 수행된다.


	<br>, <br/>

 
 jstl-1.2.jar 파일을 WebContent/WEB-INF/lib
 에 붙여넣는다.


  [ Query String (쿼리 문자열 ) ]
  웹 클라이언트에서 웹 서버에 정보를 요청할 때 추가로 전달하는 문자열
  이 문자열을 정해 규칙으로 구성되어 전달되어야 하는데 이규칙을
  url encoding 또는 query string encoding 규칙이라 한다.

  (1) 모든 데이터들은 name=value 형식이어야 한다.
  (2) 여러개의 name=value쌍을 전달할 때는 & 기호로 구분한다.
  (3) 공백은 + 문자로 변환되어 전달된다.
  (4) 영문과 숫자 그리고 일부 특수문자를 제외하고 % 기호와 함께 
        16진수 코드값으로 전달되어야 한다.


https://search.naver.com/search.naver?sm=top_hty&fbm=0&ie=utf8
                               &query=ABCabc+123%EA%B0%80%EB%82%98%EB%8B%A4


	id=ajaxtest&passwd=12345
	id=%EA%B0%80%EB%82%98%EB%8B%A4&passwd=12345
	id=100%20200&passwd=12345


















 Web Client : HTML5, CSS3, JavaScript   ---> edu
 Web Server : Servlet, JSP, (JDBC), Spring FW, MyBatis FW
                   (Junit FW, Log4J) - Java    ---> sedu


  http://localhost:8000/sedu/first.jsp?gname=듀크
  http://localhost:8000/sedu/first.jsp?gname=또치
  http://localhost:8000/sedu/firstone
  http://localhost:8000/sedu/firstone?gname=고길동
  http://localhost:8000/sedu/firstone?gname=둘리

 [ Servlet ]
 - 1998년 가을에 발표된 기술
    CGI(Common Gateway Interface)-웹의 표준, 구현언어 투명성
    ---> Fast CGI
    ---> Servlet
 - Server Side Applet(Applet : 웹 브라우저에서 싱행되는 Java 프로그램)
 - 구현상의 특징
   (1) HttpServlet 을 상속해야 한다.
   (2) main() 구현하지 않는다. (main() 메서드를 담고 있는 메인 클래스는 톰캣이 내장)
   (3) 수행하는 동안 호출되는 메서드가 정해져 있는데
        이 때 호출되는 메서드는 init(), service(), destory(), doGet(), doPost() 등이다.
        하여 이 메서드들을 선택적으로 오버라이딩해서 구현한다.
   (4) 서블릿에서 수행 결과를 출력할 때
        - 요청해온 브라우저로의 출력(응답) - HttpServletResponse 의 getWriter() 를
                                                     호출해서 클라이언트로의 출력 스트림 객체 생성
                                                     해서 출력
        - 표준 출력 : System.out.println() - 톰캣서버의 콘솔창에 출력
    (5) 서블릿이 수행하는데 필요한 데이터를 요청 보내오는 클라이언트로 부터 전달받을 수
         있다. 이 때 전달받는 데이터를 쿼리 문자열이라 한다.
	HttpServletRequest 의 getParameter():String
             또는 getParameterValues():String[]  를 사용한다.          
 - 수행상의 특징
    (1) 서블릿을 요청할 때는 "/컨텍스트루트명/서블릿의매핑명" 형식의 URI 를 사용한다.
    (2) 서블릿의 요청은 
       - 서블릿을 요청하는 URL 문자열을 브라우저의 주소 필드에 입력해서 직접 요청:GET
       - <a> 태그로 요청:GET
       - <form> 태그를 통해서 요청:GET/POST
    (3) 서블릿 객체는 한 번 생성되는 서버 종료되거나 컨텍스트가 리로드될때까지
         객체 상태를 유지한다.
    (4) 여러 클라이언트가 동일한 서블릿을 동시 요청하면 하나의 서블릿 객체를 공유해서
         수행한다.
    (5) 최초 요청시의 수행 흐름
          init(),     service() -> doGet(),     destroy()     
		          -> doPost()


   core 패키지 : FlowServlet(/flow)
                     MemberLocalServlet(/memberlocal) - GET
	        QueryServlet(/query) - GET

   http://localhost:8000/sedu/memberlocal

   Web Server : Web 통신에서 서버역할을 수행하는 프로그램(Http Server)

   Web Server + Application Server = Web Application Server = WAS
   TOMCAT = WAS = 코요테(웹서버)+카탈리나(어플리케이션서버)   





   http://localhost:8000/edu/query?p1=듀크&p2=24&p3=또치&p3=희동&p3=도우너

   java 소스들은 core 패키지에 붙인다.
   html 파일들은 WebContent 에 html 폴더를 생성하고 여기에 붙인다.


  http://localhost:8000/sedu/querytest?
  stname=%EB%93%80%ED%81%AC&pwd=1234&age=5&
  gender=%EC%97%AC%EC%9E%90&
  hobby=%ED%94%BC%EC%95%84%EB%85%B8&
  hobby=%EC%88%98%EC%98%81&
  hobby=%EB%8F%85%EC%84%9C&
  hobby=%EA%B2%8C%EC%9E%84&
  color=%EB%85%B8%EB%9E%91%EC%83%89&
  food=%EB%9D%BC%EB%A9%B4&
  food=%EB%83%89%EB%A9%B4&
  food=%EC%A7%9C%EC%9E%A5%EB%A9%B4&
  food=%ED%96%84%EB%B2%84%EA%B1%B0&
  food=%EC%9C%A1%ED%9A%8C&
  op=%EC%A7%91%EC%97%90+%EA%B0%80%EC%9E%90...%0D%0A%EC%A7%91%EC%97%90&
  h_1=-%E3%85%85-&
  h_2=%3D%E3%85%85%3D















 
                                            





















http://unico2013.dothome.co.kr/resweb/bom/exam2.html




  src = "http://70.12.115.160:8000/edu/images/xmas/....."


https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=AIzaSyD8k2DWC_7yFHCrH6LDR3RfITsmWMEqC8c



  name=duke&passwd=1234&age=&gender=female

        	request.getParameter("name")   --> "duke"

	request.getParameter("passwd")   --> "1234"

	request.getParameter("age")   --> ""

	request.getParameter("hobby")   --> null





LocalDate ndate = LocalDate.now();
DateTimeFormatter dateF = DateTimeFormatter.ofPattern(
				"yyyy년 MM월 dd일");
String date = ndate.format(dateF);


String rdate = request.getParameter("rdate");
LocalDate ndate = LocalDate.parse(rdare);
DateTimeFormatter dateF = DateTimeFormatter.ofPattern(
				"yyyy년 MM월 dd일");
String date = ndate.format(dateF);


















 