f2()
f3<- function (p="R") print(p)
f3()
f3(p="PYTHON")
f3("java")
f4<- function (p1="ㅋㅋㅋ",p2) for(i in 1:p2) print(p1)
f4(p1="abc", p2=3)
f4("abc", 3)
f4(5)
f4(p2=5)
f5<- function(...) { print("TEST"); data <- c(...); print(length(data))}
f5(10, 20, 30)
f5("abc", T, 10, 20)
f6<- function(...) {
print("수행시작")
data <- c(...)
for(item in data) {
print(item)
}
return(length(data))
}
f6()
f6(10)
f6(10,20)
f6(10,20,30)
f6(10,'abc', T, F)
f7<- function(...) {
data <- c(...)
sum <- 0;
for(item in data) {
if(is.numeric(item))
sum <- sum + item
else
print(item)
}
}
f7(10,20,30)
f7(10,20,'test', 30,40)
f8<- function(...) {
data <- list(...)
sum <- 0;
for(item in data) {
if(is.numeric(item))
sum <- sum + item
else
print(item)
}
return(sum)
}
f8(10,20,30)
f8(10,20,"test", 30,40)
View(f8)
exam1 <- function(){
return(paste(LETTERS,letters,sep = ""))
}
result <- exam1()
result
exam1 <- function(){
return(paste(LETTERS,letters,sep = ""))
}
result1 <- exam1()
result1
exam2 <- function(x){
return(sum(1:x))
}
result2 <- exam2(10)
result2
exam3 <- function(x,y){
return(abs(y-x))
}
result3 <- exam3(10,20)
result3
result3 <- exam3(20,20)
result3
result3 <- exam3(30,20)
result3
exam4 <- function(x,op,y){
result <- switch(
EXPR = op,
"+"=x+y,
"-"=x-y,
"*"=x*y,
ifelse(x==0,"오류1",
ifelse(y==0,"오류2",
ifelse(op=="%/%",x%/%y,x%%y)))
)
return(result)
}
result4 <- exam4(1,"+",1)
result4
result4 <- exam4(100,"*",33)
result4
result4 <- exam4(100,"%/%",33)
result4
result4 <- exam4(100,"%%",33)
result4
result4 <- exam4(100,"%%",0)
result4
result4 <- exam4(0,"%%",100)
result4
result4 <- exam4(0,"%%",0)
result4
exam4 <- function(x,op,y){
result <- switch(
EXPR = op,
"+"=x+y,
"-"=x-y,
"*"=x*y,
ifelse(x==0,"오류1",
ifelse(y==0,"오류2",
ifelse(op=="%/%",x%/%y,
ifelse(op=="%%",x%%y,"규격의 연산자만 전달하세요"))))
)
return(result)
}
result4 <- exam4(0,"%%",0)
result4
result4 <- exam4(4,"%%",0)
result4
result4 <- exam4(4,"%%",16)
result4
result4 <- exam4(4,"%%",3)
result4
result4 <- exam4(4,"/",3)
result4
result4 <- exam4(4,"z",3)
result4
View(exam4)
result4 <- exam4(4,"+",3)
result4
result4 <- exam4(3,"-",103)
result4
result4 <- exam4(3,"**",103)
result4
result4 <- exam4(3,"*",103)
result4
exam5 <- function(count,str="#"){
if(count>0){
for(i in 1:count){
cat(str)
}
}
}
exam5(3)
exam5(5,"*")
exam5(5,"@")
exam5(5,"aa")
exam5(2,"aa")
exam5("#")
exam5(count="#")
exam5(count=4,str="%")
exam5(count=-1,str="%")
exam6 <- function(...){
data <- c(...)
for(i in 1:length(data)){
if(data[i]>=85 & data[i]<=100){
print(paste0(data[i],"점은 ","상등급입니다."))
}
else if(data[i]<85 & data[i]>=70){
print(paste0(data[i],"점은 ","중등급입니다."))
}
else if(data[i]<70){
print(paste0(data[i],"점은 ","하등급입니다."))
}
else if(is.na(data[i])){
print("NA는 처리불가")
}
}
}
score <- c(100,,36,70,91)
exam6(score)
score <- c(100,NA,36,70,91)
exam6(score)
exam6 <- function(...){
data <- c(...)
for(i in 1:length(data)){
if(is.na(data[i])){
print("NA는 처리불가")
next
}
else if(data[i]>=85 & data[i]<=100){
print(paste0(data[i],"점은 ","상등급입니다."))
}
else if(data[i]<85 & data[i]>=70){
print(paste0(data[i],"점은 ","중등급입니다."))
}
else if(data[i]<70){
print(paste0(data[i],"점은 ","하등급입니다."))
}
}
}
score <- c(100,NA,36,70,91)
exam6(score)
result4 <- exam4(0,"-",103)
result4
score <- c(100,NA,36,70,91,NA,31)
exam6(score)
exam6 <- function(data){
for(i in 1:length(data)){
if(is.na(data[i])){
print("NA는 처리불가")
next
}
else if(data[i]>=85 & data[i]<=100){
print(paste0(data[i],"점은 ","상등급입니다."))
}
else if(data[i]<85 & data[i]>=70){
print(paste0(data[i],"점은 ","중등급입니다."))
}
else if(data[i]<70){
print(paste0(data[i],"점은 ","하등급입니다."))
}
}
}
score <- c(100,NA,36,70,91,NA,31)
exam6(score)
score <- c(100,,36,70,91,NA,31)
exam6(score)
score <- c(100,,36,70,91,NA,31)
exam6(score)
score <- c(100,,36,70,91,,31)
exam6(score)
result2 <- exam2(100)
result2
result4 <- exam4(0,"/",103)
result4
0%/%103
0%/%0
3%/%0
0%/%3
exam5(count=-1,str="%")
exam5 <- function(count,str="#"){
if(count>0){
for(i in 1:count){
cat(str)
}
}
return()
}
exam5(count=-1,str="%")
x <- 70 #전역 변수
func5 <- function() {
x <- 10 #지역 변수
y <- 20 #지역 변수
x <<- 40  # 외부 변수 x 를 수정, 지역 변수 x는 변하지 않음.
return (x+y) #지역 변수 x,y들끼리 연산
}
func5()
x
a<-3;b<-7;c<-11
ft<-function(a){
b<-a+10
c<<-a+10   # 전역대입연산
d<-a
print(a);print(b);print(c);print(d)
return()  # NULL
}
print(ft(100))
print(a);print(b);print(c);print(d)
print
UseMethod
ft.1 <- function(x) return()
ft.2 <- function(x) return(x+10)
ft.3 <- function(x) invisible(x+10)
ft.1(100)
ft.2(100)
ft.3(100)
r1 <- ft.1(1000);r1
r2 <- ft.2(1000);r2
r3 <- ft.3(1000);r3
testParamType <- function(x){
if(is.vector(x)) print("벡터를 전달했군요!")
if(is.data.frame(x)) print("데이터프레임을 전달했군요!")
if(is.list(x)) print("리스트를 전달했군요!")
if(is.matrix(x)) print("매트릭스를 전달했군요!")
if(is.array(x)) print("배열을 전달했군요!")
if(is.function(x)) print("함수를 전달했군요!")
}
#dataframe이 list에, list는 vector에 포함 됨
#list는 원소 1개 짜리 1차원 배열과 같다.
testParamType(100)
testParamType(LETTERS)
testParamType(data.frame())
testParamType(matrix())
testParamType(list())
testParamType(array())
testParamType(mean)
testError1 <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
return(rep("테스트",x))
}
View(testError1)
source('C:/boxak/Rstudy/day4.R', encoding = 'UTF-8', echo=TRUE)
testError1(5)
testError1(0)
testWarn <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
if(x>5){
x<-5
warning("5보다 크면 안됨!! 하여 5로 처리했삼...!!")
}
return(rep("테스트",x))
}
testWarn(3)
testWarn(10)
test1 <-function(p){
cat("난 수행함\n")
testError(-1)
cat("나 수행할 까요? \n")
}
test1()
test2 <- function(p){
cat("난 수행함\n")
try(testError(-1))
cat("나 수행할 까요? \n")
}
test2()
testAll <-function(p){
tryCatch({
if(p=="오류테스트"){
testError1(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError1(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
}, error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부를 따라서 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll <-function(p){
tryCatch({
if(p=="오류테스트"){
testError1(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError1(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
}, error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부에 관계없이 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
f.case1 <- function(x) {
if(is.na(x))
return("NA가 있슈")
else
return("NA가 없슈")
}
f.case1(100)
f.case1(NA)
f.case1(1:6)
any
f.case2 <- function(x) {
if(any(is.na(x)))
return("NA가 있슈")
else
return("NA가 없슈")
}
f.case2(100)
f.case2(NA)
f.case2(1:6)
f.case2(c(10,20,30))
f.case2(c(NA, 20))
f.case2(c(10, NA, 20))
f.case3 <- function(x) {
if(all(is.na(x)))
return("모두 NA임")
else
return("모두 NA인 것은 아님")
}
f.case3(100)
f.case3(LETTERS)
f.case3(NA)
f.case3(c(NA, NA, NA))
f.case3(c(NA, NA, 10))
testSleep <- function(x) {
for(data in 6:10) {
cat(data,"\n")
if(x)
Sys.sleep(1)
}
return()
}
testSleep(FALSE)
testSleep(TRUE)
funcArgs <- function(...) {
p <- c(...)
data <- 1:10
opts <- ifelse(length(p), p, "")
print(p)
print(opts)
if(opts[1] == "")
print(data)
else
for(opt in opts) {
switch(EXPR=opt,
SUM=, Sum=, sum= print(sum(data)),
MEAN=, Mean=, mean= print(mean(data)),
DIFF=, Diff=, diff= print(max(data) - min(data)),
MAX=, Max=, max= print(max(data)),
MIN=, Min=, min= print(min(data)),
SORT=, Sort=, sort= print(sort(data))
)
}
}
funcArgs(1:10)
funcArgs(1,2,3,4,5)
funcArgs(c(1,2,3,4,5))
funcArgs(3)
funcArgs(4)
funcArgs(3)
funcArgs(1)
funcArgs(2)
funcArgs(6)
funcArgs(c(1,2,3))
funcArgs(c(3,6,9))
funcArgs(c("MAX","MIN","MEAN"))
funcArgs <- function(...) {
p <- c(...)
data <- 1:10
opts <- ifelse(length(p), p, "")
print(p)
#print(opts)
if(opts[1] == "")
print(data)
else
for(opt in opts) {
switch(EXPR=opt,
"SUM"=, "Sum"=, "sum"= print(sum(data)),
"MEAN"=, "Mean"=, "mean"= print(mean(data)),
"DIFF"=, "Diff"=, "diff"= print(max(data) - min(data)),
"MAX"=, "Max"=, "max"= print(max(data)),
"MIN"=, "Min"=, "min"= print(min(data)),
"SORT"=, "Sort"=, "sort"= print(sort(data))
)
}
}
funcArgs(c("MAX","MIN","MEAN"))
funcArgs <- function(...) {
p <- c(...)
data <- 1:10
opts <- ifelse(length(p), p, "")
print(p)
print(opts)
if(opts[1] == "")
print(data)
else
for(opt in opts) {
switch(EXPR=opt,
"SUM"=, "Sum"=, "sum"= print(sum(data)),
"MEAN"=, "Mean"=, "mean"= print(mean(data)),
"DIFF"=, "Diff"=, "diff"= print(max(data) - min(data)),
"MAX"=, "Max"=, "max"= print(max(data)),
"MIN"=, "Min"=, "min"= print(min(data)),
"SORT"=, "Sort"=, "sort"= print(sort(data))
)
}
}
funcArgs(c("MAX","MIN","MEAN"))
funcArgs(c("MIN","MIN","MEAN"))
funcArgs(c("MEAN","MIN","MAX"))
funcArgs(c("sort","MIN","MAX"))
funcArgs <- function(...) {
p <- c(...)
data <- 1:10
#opts <- ifelse(length(p), p, "") 첫번째 원소만 들어감.
if(length(p) > 0){
opts <- p
}
else{
opts <- ""
}
print(p)
print(opts)
if(opts[1] == "")
print(data)
else
for(opt in opts) {
switch(EXPR=opt,
"SUM"=, "Sum"=, "sum"= print(sum(data)),
"MEAN"=, "Mean"=, "mean"= print(mean(data)),
"DIFF"=, "Diff"=, "diff"= print(max(data) - min(data)),
"MAX"=, "Max"=, "max"= print(max(data)),
"MIN"=, "Min"=, "min"= print(min(data)),
"SORT"=, "Sort"=, "sort"= print(sort(data))
)
}
}
funcArgs(c("sort","MIN","MAX"))
